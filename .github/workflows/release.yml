name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm run test:ci --if-present || npm run test -- --watch=false --browsers=ChromeHeadless
      
    - name: Build for production
      run: npm run build -- --configuration production
      
    - name: Create distribution package
      run: |
        # Create a zip file of the built application
        cd dist
        zip -r ../component-testing-app-${{ github.ref_name }}.zip .
        cd ..
        
        # Create source code archive
        git archive --format=zip --output=source-code-${{ github.ref_name }}.zip HEAD
        
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "Generating changelog from $PREVIOUS_TAG to ${{ github.ref_name }}"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..${{ github.ref_name }})
        else
          echo "No previous tag found, generating changelog from first commit"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)")
        fi
        
        # Save changelog to file
        echo "## Changes in ${{ github.ref_name }}" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "$CHANGELOG" >> CHANGELOG.md
        
        # Set output for use in release notes
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          ## Component Testing Application - ${{ github.ref_name }}
          
          ### 🚀 What's New
          ${{ steps.changelog.outputs.changelog }}
          
          ### 📦 Downloads
          - **Application Bundle**: component-testing-app-${{ github.ref_name }}.zip
          - **Source Code**: source-code-${{ github.ref_name }}.zip
          
          ### 🌐 Live Demo
          [View Application](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)
          
          ### 🧪 Test Coverage
          This release includes comprehensive test coverage with:
          - Unit tests for all components
          - Interface testing
          - Integration tests
          - E2E tests (if available)
          
        files: |
          component-testing-app-${{ github.ref_name }}.zip
          source-code-${{ github.ref_name }}.zip
          CHANGELOG.md
        prerelease: ${{ github.event.inputs.prerelease == 'true' }}
        generate_release_notes: true
        
    - name: Update package.json version
      if: github.event_name == 'workflow_dispatch'
      run: |
        # Update package.json version if manually triggered
        npm version ${{ github.event.inputs.version }} --no-git-tag-version
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json package-lock.json
        git commit -m "chore: bump version to ${{ github.event.inputs.version }}" || exit 0

  deploy-release:
    runs-on: ubuntu-latest
    needs: create-release
    if: github.ref_type == 'tag'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for production
      run: npm run build -- --configuration production --base-href "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
      
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist/componenttesting-ex
        tag_name: ${{ github.ref_name }}
        tag_message: 'Deployment for ${{ github.ref_name }}'

  notify-teams:
    runs-on: ubuntu-latest
    needs: [create-release, deploy-release]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.create-release.result == 'success'
      run: |
        echo "🎉 Release ${{ github.ref_name }} created successfully!"
        echo "📦 Artifacts uploaded to GitHub Releases"
        echo "🌐 Application deployed to GitHub Pages"
        echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
        
    - name: Notify failure
      if: needs.create-release.result == 'failure'
      run: |
        echo "❌ Release creation failed for ${{ github.ref_name }}"
        echo "Please check the workflow logs for details"
        exit 1

  post-release:
    runs-on: ubuntu-latest
    needs: [create-release, deploy-release]
    if: success() && github.ref_type == 'tag'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create post-release PR
      run: |
        # Create a branch for post-release updates
        BRANCH_NAME="post-release/${{ github.ref_name }}"
        git checkout -b $BRANCH_NAME
        
        # Update version in package.json if needed
        echo "Post-release tasks for ${{ github.ref_name }}" > POST_RELEASE_NOTES.md
        echo "- Release created successfully" >> POST_RELEASE_NOTES.md
        echo "- Application deployed to GitHub Pages" >> POST_RELEASE_NOTES.md
        echo "- Documentation updated" >> POST_RELEASE_NOTES.md
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add POST_RELEASE_NOTES.md
        git commit -m "docs: add post-release notes for ${{ github.ref_name }}" || exit 0
        git push origin $BRANCH_NAME || exit 0
        
        # Create PR for post-release changes
        gh pr create \
          --title "Post-release updates for ${{ github.ref_name }}" \
          --body "Automated post-release updates including documentation and version bumps." \
          --head $BRANCH_NAME \
          --base main || true
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}